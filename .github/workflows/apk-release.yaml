name: APK Release CI

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'    # Stable release tags (e.g., 1.2.3)
      - 'PRE-*'                   # Pre-release tags with any commit SHA (e.g., PRE-abc1234)
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up local.properties
        run: |
          echo "WEB_CLIENT_ID=${{ secrets.WEB_CLIENT_ID }}" > local.properties
          echo "Created local.properties"

      - name: Set pre-release version name based on tag
        if: startsWith(github.ref, 'refs/tags/PRE-')
        run: |
          VERSION_NAME="${{ github.ref_name }}"
          sed -i "s/const val APP_VERSION_NAME = .*/const val APP_VERSION_NAME = \"$VERSION_NAME\"/" app/build.gradle.kts

          echo "Updated version name to $VERSION_NAME"

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v3

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 19
          distribution: 'temurin'

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      - name: Setup build tool version variable
        shell: bash
        run: |
          BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
          echo "BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION" >> $GITHUB_ENV
          echo Last build tool version is: $BUILD_TOOL_VERSION

      - name: Run gradle tests
        run: ./gradlew test

      - name: Build gradle project
        run: ./gradlew assembleRelease

      - name: Sign release APK
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}

      - name: Prepare release artifact
        id: prepare_artifact
        run: |
          mv app/build/outputs/apk/release/app-release-unsigned-signed.apk app-release.apk

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: app-release.apk

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: release-apk

      - name: Get previous tag
        id: previousTag
        run: |
          # For regular semver release tags, only consider previous semver tags (not PRE-*)
          if [[ "${{ github.ref_name }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Find previous semver tag that matches the pattern
            previous_tag=$(git --no-pager tag --sort=-creatordate | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | grep -v "${{ github.ref_name }}" | head -1 || echo "")
          else
            # For PRE tags, consider all tags
            previous_tag=$(git --no-pager tag --sort=-creatordate | grep -v "${{ github.ref_name }}" | head -1 || echo "")
          fi

          echo "Found previous tag: $previous_tag"
          echo "previousTag=$previous_tag" >> $GITHUB_ENV

      - name: Generate changelogs
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fromTag: ${{ github.ref_name }}
          toTag: ${{ env.previousTag }}
          excludeTypes: ${{ !startsWith(github.ref, 'refs/tags/PRE-') && 'build,docs,other,style' || '' }}
          writeToFile: true
          filename: 'CHANGELOG.md'

      - name: Manage pre-release
        if: startsWith(github.ref, 'refs/tags/PRE-')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating pre-release with tag ${{ github.ref_name }}..."

          # Delete the release if it already exists (in case of re-run)
          gh release delete ${{ github.ref_name }} --yes || echo "No existing release to delete."

          # Create the release using the original tag name
          gh release create ${{ github.ref_name }} \
            --title "${{ github.ref_name }}" \
            --notes-file CHANGELOG.md \
            --prerelease \
            app-release.apk

      - name: Manage stable release
        if: "!startsWith(github.ref, 'refs/tags/PRE-')"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete ${{ github.ref_name }} --yes || echo "Failed to delete ${{ github.ref_name }} release."

          gh release create ${{ github.ref_name }} \
            --title "${{ github.ref_name }}" \
            --notes-file CHANGELOG.md \
            app-release.apk
